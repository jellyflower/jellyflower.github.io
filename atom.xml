<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Place Where Wishes Come True]]></title>
  <link href="http://jellyflower.github.io/atom.xml" rel="self"/>
  <link href="http://jellyflower.github.io/"/>
  <updated>2014-08-11T22:34:50-04:00</updated>
  <id>http://jellyflower.github.io/</id>
  <author>
    <name><![CDATA[Jellyflower]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How Would You Utilize Your Smartphone if You Were Sent Back to the Middle Ages?]]></title>
    <link href="http://jellyflower.github.io/blog/2014/04/18/how-would-you-utilize-your-smartphone-if-you-were-sent-back-to-the-middle-ages/"/>
    <updated>2014-04-18T21:54:15-04:00</updated>
    <id>http://jellyflower.github.io/blog/2014/04/18/how-would-you-utilize-your-smartphone-if-you-were-sent-back-to-the-middle-ages</id>
    <content type="html"><![CDATA[<p><a href="http://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=27024576"><img class="center" src="http://jellyflower.github.io/img/27024576_m.jpg"></a></p>

<p>In the airing anime <em>No Game No Life</em>, the protagonistic brother and sister were sent to a world set in Medieval period, with their smartphones. After watching the first two episodes, I find it quite fun to think about the question: how should they manage their smartphones’ usage?</p>

<!-- more -->


<p>The first thing that comes to my mind is that smartphones are essentially magic in the Middle Ages. If you are caught using a smartphone by Medieval people, you’ll certainly get into trouble. Thus, it is very important that the existence of your smartphone should be kept secret. Also, the smartphone is irreplaceable. You don’t want to lose it.</p>

<p>Then, I think of a big problem: there is no electricity supply. Once the battery died, the phone would be a brick forever. So we need to conserve power as much as possible. I can come up with the following points:</p>

<ul>
<li>Switch to flight mode, since there is no signal after all</li>
<li>Adjust screen brightness to minimum, and turn off automatic adjustment</li>
<li>Turn off background app refresh</li>
<li>Don&rsquo;t play games or listen to music! Not even once!</li>
</ul>


<p>Now, let’s think about what advantages can the smartphone bring us in the Middle Ages:</p>

<ul>
<li>Calculator, which solves practically unsolvable arithmetic problems in the Middle Ages, easily and correctly. Through that, you gained the trust from the king.</li>
<li>Camera, which records information accurately. The princess, who was a cute girl, let you read a secret tome in her room, but only once and didn’t allow you to take notes. People would assume you could only acquire very limited knowledge from the tome, but you actually took pictures of several important pages. The princess believed you must be a genius! (Just how ridiculous this plot is!)</li>
<li>Compass. You led your team out of a death maze and became a hero.</li>
<li>Voice recorder. Your archenemy, a hypocrite, finally showed his true colors and threatened you when you two were alone. However, it was all recorded and you exposed him in front of the princess. (At this point, we assumed that you could trust the princess enough to tell her the secret of your smartphone&hellip;)</li>
</ul>


<p>Aah, this is so addictive. Am I missing any even more interesting scenarios?</p>

<p>However, as I read the light novel on which the anime was based, it turned out that the siblings had solar chargers. This is so evil! Why haven’t I seen anyone using a solar charger around? Now I’m deprived of fun.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qaac: The New Preferred Way to Encode AAC]]></title>
    <link href="http://jellyflower.github.io/blog/2013/06/18/qaac-the-new-preferred-way-to-encode-aac/"/>
    <updated>2013-06-18T23:13:00-04:00</updated>
    <id>http://jellyflower.github.io/blog/2013/06/18/qaac-the-new-preferred-way-to-encode-aac</id>
    <content type="html"><![CDATA[<p>It has long been widely believed that <a href="http://www.nero.com/enu/company/about-nero/nero-aac-codec.php">Nero AAC Codec</a> generally produces AAC of the best quality. However, recently several studies indicate that Apple encoder already surpasses Nero AAC Codec in terms of quality.</p>

<p>The actual encoding code is shipped with Apple Application Support as a form of a library. Apple doesn’t provide a more convenient way to invoke the encoder than using iTunes. Fortunately, there is an open source project called <a href="https://sites.google.com/site/qaacpage/">qaac</a> fulfilling that role.</p>

<p>To produce AAC exactly equivalent to the so-called iTunes Plus quality, use the following command:</p>

<pre><code>qaac -v256 -q2 INPUT
</code></pre>

<p>I’m currently encoding in qaac’s True VBR mode to prepare music for my iPhone. The command is like this:</p>

<pre><code>qaac -V63 -q2 INPUT
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use 64-bit X264 With 32-bit AviSynth]]></title>
    <link href="http://jellyflower.github.io/blog/2013/03/09/how-to-use-64-bit-x264-with-32-bit-avisynth/"/>
    <updated>2013-03-09T18:40:00-05:00</updated>
    <id>http://jellyflower.github.io/blog/2013/03/09/how-to-use-64-bit-x264-with-32-bit-avisynth</id>
    <content type="html"><![CDATA[<p>For some reason I had to use AviSynth 2.6, of which I could’t seem to find a 64-bit build. But I did’t want to use 32-bit x264, because the 64-bit version had much better performance on 64-bit machines.</p>

<p>After some research, I found avs2pipemod. avs2pipemod is a program that pipes the output of AviSynth to other programs, with which we are able to connect 64-bit x264 and 32-bit AviSynth.</p>

<p>Because we will be piping raw video, we have to specify the parameters of the video manually. Fortunately avs2pipemod is able to generate those arguments for us. First we execute the following command:</p>

<pre><code>avs2pipemod -x264raw SCRIPT.avs
</code></pre>

<p>And we will get something like this:</p>

<pre><code>- --demuxer raw --input-csp bgr --input-depth 8 --input-res 1920x1080 --output-csp rgb --frames 24429 --fps 30030/1001
</code></pre>

<p>Of course the values will change depending on your source. So now we can call x264 with those arguments</p>

<pre><code>avs2pipemod -rawvideo SCRIPT.avs | x264 - --demuxer raw --input-csp bgr --input-depth 8 --input-res 1920x1080 --frames 24429 --fps 30030/1001 --preset veryslow --crf 23 -o OUTPUT.mkv
</code></pre>

<p>It’s just copying the arguments generated by the first command, plus the arguments you would like to use for encoding.</p>

<p>For some reason when I tried this, I got my encoded video upside down. I am not quite clear what caused that. However the problem can be easily solved by changing the previous command a little bit:</p>

<pre><code>avs2pipemod -rawvideo=vflip SCRIPT.avs | ...
</code></pre>

<p>The x264 part remains the same. I only tried once, so I don’t know if this happens to just some or all videos. You definitely want to check your result to know if it is necessary for you to use vflip.</p>

<p>So far we’ve done the video part. For audio, use the following command:</p>

<pre><code>avs2pipemod -wav SCRIPT.avs | flac -8V -o OUTPUT.flac -
</code></pre>

<p>Here we are piping the audio in WAV format, therefore we don’t need to specify the parameters of the audio. Of course you can use whatever encoder you want.</p>

<p>Now just mux the two streams and you are good to go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[黑客如何给 B 站投稿]]></title>
    <link href="http://jellyflower.github.io/blog/2013/02/12/the-way-a-hacker-submits-video-to-bilibili/"/>
    <updated>2013-02-12T00:03:00-05:00</updated>
    <id>http://jellyflower.github.io/blog/2013/02/12/the-way-a-hacker-submits-video-to-bilibili</id>
    <content type="html"><![CDATA[<p>今天一时兴起给哔哩哔哩投稿，研究了一下发现还真有些门道。这里把我的研究成果发出来，起到抛玉引砖的作用。（是的我的方法是最好的，你的方法只能是砖。）</p>

<p>众所周知，哔哩哔哩并没有自己的服务器，其视频全部是盗链其他的视频站。按目前的状况，用新浪视频是最好的选择。</p>

<p>使用新浪视频，一个问题是审核，貌似现在新浪视频是先发后审。所以你的视频要能存活一天才能说是过了审核。但偶尔也有两三天后被和谐的。</p>

<p>至于过审核没什么技巧，视频标题胡乱填，别的信息能不填就不填，一般来说问题不大。</p>

<p>最大的问题是，新浪视频会不分青红皂白把你上传的视频重编码。重编码的结果往往是渣画质和渣音质。所以哔哩哔哩众把新浪视频称为“渣浪”。而我们的目的就是要防止视频被重编码，就是所谓的“战渣浪”。</p>

<!-- more -->


<p><span class='pullquote-right' data-pullquote='如果你上传的文件平均比特率不到 1 Mib/s，就不会被“渣浪”重编码。'>
“战渣浪”的要诀很简单，就是一条：如果你上传的文件平均比特率不到 1 Mib/s，就不会被“渣浪”重编码。注意这里是整个文件的比特率，包括音频流。
</span></p>

<p>其实你被我骗了，上面这条只是最重要的一条。其他还要注意，容器格式只能是 FLV，其中包含 AVC 编码的视频流和 AAC 编码的音频流。AVC 和 AAC 编码有很多 profiles 啊什么的，我没有具体测试支持哪些。</p>

<p>所以可以先看看要上传的文件，如果比特率和编码格式达到要求，恭喜你，不用重编码了。只用确保容器是 FLV 就可以上传了。换容器可以用 FFmpeg 很简单的办到：</p>

<pre><code>ffmpeg -i INPUT -vcodec copy -acodec copy OUTPUT
</code></pre>

<p>要重编码的话，我们就得规划一下，音频流的比特率 ~ 140 Kib/s 左右足矣，然后视频流就 ~ 800 Kib/s 吧。</p>

<p>编码视频用 x264：</p>

<pre><code>x264 INPUT -o video.mkv --pass 1 --bitrate 800
x264 INPUT -o video.mkv --pass 2 --bitrate 800
</code></pre>

<p><span class='pullquote-right' data-pullquote='使用 x264 的平均比特率模式和二次通过方法能相当精准的达到既定的比特率目标。'>
使用 x264 的平均比特率模式和二次通过方法能相当精准的达到既定的比特率目标。这里中间视频流存在 MKV 容器里面，不用容器的话，最后一步 mux 成 FLV 会出问题，具体原因没研究。
</span></p>

<p>音频部分要先抽出原视频的音频：</p>

<pre><code>ffmpeg -i INPUT -vn -acodec pcm_s32le -ac 2 audio.wav
</code></pre>

<p>然后用 Nero AAC Codec 编码：</p>

<pre><code>neroaacenc -q 0.4 -lc -ignorelength -if audio.wav -of audio.m4a
</code></pre>

<p>最后 mux 就行了：</p>

<pre><code>ffmpeg -i video.mkv -i audio.m4a -vcodec copy -acodec copy OUTPUT
</code></pre>

<p>这样就成功了。把得到的 FLV 传到新浪视频，就可以给哔哩哔哩投稿了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《雾之本境》完美精确攻略]]></title>
    <link href="http://jellyflower.github.io/blog/2013/01/10/twisty-destiny-walkthrough/"/>
    <updated>2013-01-10T21:51:00-05:00</updated>
    <id>http://jellyflower.github.io/blog/2013/01/10/twisty-destiny-walkthrough</id>
    <content type="html"><![CDATA[<p><strong>本攻略由水竹叶独立整理和编写。</strong></p>

<p><img src="http://jellyflower.github.io/img/cgyyq11.jpg" alt="" /></p>

<p>总的来说，先推扬雨晴和祁连遥才能推苒雪忆。童玲推不了，汪星涵救不了。</p>

<p>我该怎么做？</p>

<ul>
<li>支持妹子，来个白菜豆腐。 <strong>扬雨晴+2</strong></li>
<li>饭菜好奇怪，还是算了。</li>
</ul>


<p>王用斌的身份是————</p>

<!-- more -->


<ul>
<li>王用斌是一名学生！ <strong>扬雨晴+1</strong></li>
<li>王用斌曾经是秘书处主席！ <strong>扬雨晴+3</strong></li>
<li>王用斌曾经是童玲的男友！</li>
</ul>


<p>必须马上做出决定，否则一切就太晚了！</p>

<ul>
<li>让雪忆回来</li>
<li>目送雪忆远去</li>
</ul>


<p>（完成<strong>无恙篇</strong>）那么我究竟还要不要继续追究呢？</p>

<ul>
<li>继续追究！ <strong>苒雪忆+1</strong></li>
<li>算了，继续也没有意义。</li>
</ul>


<p>如果<strong>苒雪忆</strong>为 1，则出现<strong>特殊剧情</strong>。</p>

<p>（<strong>苒雪忆</strong>为 1）昏昏沉沉的接着睡？还是出去走走？</p>

<ul>
<li>接着睡吧</li>
<li>索性不睡，出去走走 <strong>苒雪忆+1</strong></li>
</ul>


<p>如果<strong>苒雪忆</strong>为 2，则出现<strong>特殊剧情</strong>。</p>

<p>大体能明白祁连遥的意思，还是大致说出来内心感受吧。</p>

<ul>
<li>挺好的</li>
<li>一般般 <strong>扬雨晴+1</strong></li>
</ul>


<p>但是如果仔细想想，这个案件应该不难。</p>

<ul>
<li>支持贺云舟的看法</li>
<li>怎么可能会有这样的知情者？ <strong>扬雨晴+2</strong></li>
</ul>


<p>要不要再和她默契一下呢？</p>

<ul>
<li>贺云舟怎么还不回来？ <strong>扬雨晴+1</strong></li>
<li>沉默 <strong>扬雨晴+2</strong></li>
</ul>


<p>这种紧急关头，我到底应该支持谁？</p>

<ul>
<li>支持扬雨晴</li>
<li>支持祁连遥 <strong>扬雨晴+1</strong></li>
</ul>


<p>如果她不走，那我会做什么呢？</p>

<ul>
<li>我不想提起。 <strong>扬雨晴+1</strong></li>
<li>我们会很幸福的。 <strong>扬雨晴+3</strong></li>
</ul>


<p>如果<strong>苒雪忆</strong>为 2，则出现<strong>特殊剧情</strong>。</p>

<p>贺云舟此刻邀请我逃出去，我应该怎么办？</p>

<ul>
<li>和他一起逃出去。 <strong>扬雨晴+3</strong> <strong>跳过下面的苒雪忆特殊剧情</strong></li>
<li>放弃逃离。 <strong>扬雨晴+1</strong></li>
</ul>


<p>如果<strong>苒雪忆</strong>为 2，则出现<strong>特殊剧情</strong>。</p>

<p>（<strong>苒雪忆</strong>为 2）我该怎么办呢？</p>

<ul>
<li>回宿舍</li>
<li>去走走 <strong>特殊剧情</strong></li>
</ul>


<p>如果<strong>扬雨晴</strong>为 5 或更低，则出现<strong>特殊剧情</strong>并且<strong>祁连遥+1</strong>。</p>

<p>如果<strong>苒雪忆</strong>为 2，则进入<strong>苒雪忆线</strong>。</p>

<p>如果<strong>祁连遥</strong>为 1，则出现<strong>特殊剧情</strong>并且<strong>祁连遥+1</strong>。</p>

<p>如果<strong>扬雨晴</strong>为 6 或更高，则进入<strong>扬雨晴线</strong>。</p>

<p>进入<strong>祁连遥线</strong>。</p>

<p>（<strong>无恙篇</strong>在完成<strong>扬雨晴线</strong>和<strong>祁连遥线</strong>后出现。）</p>

<p>（<strong>息心篇</strong>在完成<strong>苒雪忆线</strong>后出现。）</p>

<p><strong>本攻略由水竹叶独立整理和编写。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《雪之本境EX》和《雪之本境～解境篇～》结局整理]]></title>
    <link href="http://jellyflower.github.io/blog/2013/01/09/snow-trap-endings/"/>
    <updated>2013-01-09T21:18:00-05:00</updated>
    <id>http://jellyflower.github.io/blog/2013/01/09/snow-trap-endings</id>
    <content type="html"><![CDATA[<p><img src="http://jellyflower.github.io/img/tx_cg_th.jpg" alt="" /></p>

<p>发现很多人对各结局的具体情况存有疑问，希望搞清楚，所以这里整理一下。</p>

<iframe width='750' height='350' frameborder='0' src='https://docs.google.com/spreadsheet/pub?key=0As1rSZ9BFIoWdEVBUzNHX25zMlZTUG5xS0ZjQVM1UWc&single=true&gid=0&output=html&widget=true'></iframe>


<p>总的来说，主角作为受害者虽然复仇成功，可是也把同是受害者的江庭雪、江城雪和白悠悠的命也搭进去了。有时候太过执着也不是好事呢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《雪之本境EX》和《雪之本境～解境篇～》完美精确攻略]]></title>
    <link href="http://jellyflower.github.io/blog/2013/01/08/snow-trap-walkthrough/"/>
    <updated>2013-01-08T17:19:00-05:00</updated>
    <id>http://jellyflower.github.io/blog/2013/01/08/snow-trap-walkthrough</id>
    <content type="html"><![CDATA[<p><strong>本攻略由水竹叶独立整理和编写。</strong></p>

<p>To international readers:</p>

<p>Though I don’t expect this, but thanks for showing interest in these two Chinese doujin visual novels. Should you need help translating this walkthrough, feel free to contact me.</p>

<p>本文是这两个游戏的攻略，列出了所有选项的作用和所有结局的达成条件。</p>

<p><img src="http://jellyflower.github.io/img/ghf_cg_th.jpg" alt="" /></p>

<!-- more -->


<p><a href="#ex">雪之本境EX</a></p>

<p><a href="#revenge">雪之本境～解境篇～</a></p>

<h2><a id="ex"></a>雪之本境EX</h2>

<p>一共只有一个变量。结局由这个变量的数值决定。</p>

<p>嗯……我们在哪里进行的谈话</p>

<ul>
<li>雪山中 <strong>+1</strong></li>
<li>旅店中 <strong>+2</strong></li>
<li>梦境中</li>
</ul>


<p>功能吗？建在这么高的雪山中，能有什么用呢？</p>

<ul>
<li>娱乐功能的旅店 <strong>+1</strong></li>
<li>救助功能的救助站 <strong>+1</strong></li>
<li>刺激艺术家细胞的风雅之地</li>
</ul>


<p>现在该冷静下来，仔细想想我应该怎么做？</p>

<ul>
<li>主动道歉</li>
<li>什么都不做</li>
</ul>


<p>最先发现无线电被破坏的人是……</p>

<ul>
<li>白悠悠 <strong>+1</strong></li>
<li>店长</li>
<li>季愁然和白悠悠 <strong>+2</strong></li>
</ul>


<p>比较让我在意的其实是……</p>

<ul>
<li>昨天那封信你是怎么看的？</li>
<li>没什么 <strong>+1</strong></li>
</ul>


<p>我该如何追问？</p>

<ul>
<li>什么叫完全不见？</li>
<li>保持沉默。 <strong>+1</strong></li>
</ul>


<p>但或许我应该……</p>

<ul>
<li>安慰一下江城雪 <strong>+1</strong></li>
<li>躺下</li>
</ul>


<p>但是究竟是否遵守，还是由我自己说的算。</p>

<ul>
<li>遵守 <strong>+3</strong></li>
<li>不遵守</li>
</ul>


<p>他们的歉意是不是真心的呢？</p>

<ul>
<li>真的 <strong>+1</strong></li>
<li>假的</li>
</ul>


<p>隐瞒的东西再清楚不过。</p>

<ul>
<li>隐瞒肉的来历 <strong>+1</strong></li>
<li>隐瞒贺松原死亡真相 <strong>+2</strong></li>
<li>隐瞒境主的身份</li>
</ul>


<p>我该怎么办？</p>

<ul>
<li>看看床底 <strong>+1</strong></li>
<li>不管了，先睡觉</li>
</ul>


<p>是如实相告，还是隐瞒呢？</p>

<ul>
<li>告诉 <strong>+1</strong></li>
<li>隐瞒</li>
</ul>


<p>我是否应该赞成对照笔迹？</p>

<ul>
<li>对照 <strong>+1</strong></li>
<li>不对照</li>
</ul>


<p>我该怎么办？</p>

<ul>
<li>坚持下去！ <strong>结局：执拗线</strong></li>
<li>继续妥协！</li>
</ul>


<p>此时，如果<strong>变量</strong>为 9 或更低，则进入<strong>结局：雪葬</strong>，否则进入<strong>结局：本境之雪</strong>。</p>

<p>进入<strong>结局：本境之雪</strong>会开启<strong>雪境旅店</strong>。</p>

<p><img src="http://jellyflower.github.io/img/byy_cg_th.jpg" alt="" /></p>

<h2><a id="revenge"></a>雪之本境～解境篇～</h2>

<p>总的来说，所有选项分为两类，一类影响<strong>归海</strong>的好感，另一类影响自己的<strong>推理</strong>正确性。最后结局由这两个变量的数值共同决定。</p>

<p>该说点什么好呢？</p>

<ul>
<li>对不起，把你弄湿了</li>
<li>糟糕！全喷到归海姐脸上了！</li>
<li>归海，你没事吧？ <strong>归海+1</strong></li>
</ul>


<p>我要不要试探一下呢？</p>

<ul>
<li>难道是店长……</li>
<li>你们的意见是…… <strong>归海+1</strong></li>
</ul>


<p>我要！</p>

<ul>
<li>提出建议！</li>
<li>看情况 <strong>归海+1</strong></li>
</ul>


<p>真纠结啊，究竟该怎么决定呢？</p>

<ul>
<li>既然想留就留下来吧 <strong>归海+2</strong></li>
<li>你还是和大家一起下山的好</li>
</ul>


<p>要不要蒙混过关呢？</p>

<ul>
<li>你说的是什么约定？ <strong>归海+2</strong></li>
<li>那个啊，当然记得。</li>
</ul>


<p>仔细想想，我要不要支持归海的观点，让大家住在一起。</p>

<ul>
<li>表示支持 <strong>归海+2</strong></li>
<li>沉默</li>
</ul>


<p>是如实相告，还是隐瞒呢？</p>

<ul>
<li>告诉 <strong>推理+1</strong></li>
<li>隐瞒</li>
</ul>


<p>啊……我……</p>

<ul>
<li>当然愿意！ <strong>归海+1</strong></li>
<li>不行，我还要保存体力拯救世界。</li>
<li>小雪，上次那件女仆装你带了？ <strong>归海+2</strong></li>
</ul>


<p>仔细想一想，做出选择吧。</p>

<ul>
<li>告诉鸾渊 <strong>推理+1</strong></li>
<li>暂时不说</li>
</ul>


<p>我该不该对归海说出实情呢？</p>

<ul>
<li>告诉归海这一切。 <strong>归海+2</strong></li>
<li>不，还不能说。</li>
</ul>


<p>该用怎么样的战略！</p>

<ul>
<li>用力</li>
<li>用吃奶的力 <strong>归海+1</strong></li>
<li>双手可以吗？ <strong>归海+2</strong></li>
</ul>


<p>冷静一下，结合真实世界的现场，来解开眼前的谜题！</p>

<ul>
<li>两人死亡的地点根本不同</li>
<li>两人死亡的时间根本不同 <strong>推理+1</strong></li>
</ul>


<p>看来问题很简单了，这个世界中的成启言有没有成功呢？</p>

<ul>
<li>他成功了</li>
<li>他失败了</li>
<li>他还没有出手 <strong>推理+1</strong></li>
</ul>


<p>那么我该怎么解释呢？</p>

<ul>
<li>我只是想看望下你们。 <strong>推理+1</strong></li>
<li>我在找境主的证据。</li>
<li>你们这群死基佬！ <strong>结局：雪之本基</strong></li>
</ul>


<p>首先，必须判断这个家伙最有可能是谁？</p>

<ul>
<li>境主 <strong>推理+1</strong></li>
<li>普通人</li>
</ul>


<p>那么成启言遭遇境主地点是……</p>

<ul>
<li>自己房间！</li>
<li>其它地方！ <strong>推理+1</strong></li>
</ul>


<p>冷静想一想，完成给境主最后的一击！</p>

<ul>
<li>他偷换了身份！</li>
<li>他转移了事发地点 <strong>推理+1</strong></li>
<li>他不是真凶！</li>
</ul>


<p>杀死成启言的就是——</p>

<ul>
<li>境主</li>
<li>叔桐山</li>
<li>白悠悠 <strong>推理+1</strong></li>
</ul>


<p>仔细想想，凶手这么做的目的是什么？</p>

<ul>
<li>延时装置 <strong>推理+1</strong></li>
<li>误导他人</li>
<li>制造不在场证明</li>
</ul>


<p>好吧，我先回想下，顺便联系其他的信件，确认这个收件人是谁吧。</p>

<ul>
<li>成启言</li>
<li>常舍青</li>
<li>贺松原 <strong>推理+1</strong></li>
</ul>


<p>当然可以！真正的贺松原信件是——</p>

<ul>
<li>归海带给我的！ <strong>推理+1</strong></li>
<li>现场发现的！</li>
<li>境主！你先给个提示！</li>
</ul>


<p>原来的信件是……</p>

<ul>
<li>成启言 <strong>推理+1</strong></li>
<li>贺松原</li>
<li>境主！你再给个提示！</li>
</ul>


<p>那么如你所愿！成启言的信件之所以在贺松原身上是因为——</p>

<ul>
<li>他现场进行了置换 <strong>推理+1</strong></li>
<li>境主，再来点提示</li>
</ul>


<p>境主，这其中的原因就是——</p>

<ul>
<li>常舍青还有一套！</li>
<li>境主有一套！ <strong>推理+1</strong></li>
</ul>


<p>这一切能说明什么呢？</p>

<ul>
<li>旅店的原来主人</li>
<li>境主的布局原因 <strong>推理+1</strong></li>
</ul>


<p>此时，如果没有阅读<strong>明眸篇</strong>，则进入<strong>结局：归海BE</strong>，并开启<strong>明眸篇</strong>。</p>

<p>如果已经阅读<strong>明眸篇</strong>，但是<strong>推理</strong>为 7 或更低，则依然进入<strong>结局：归海BE</strong>。</p>

<p>如果已经阅读<strong>明眸篇</strong>，并且<strong>推理</strong>为 8 或更高，此时，如果<strong>归海</strong>为 7 或更低，则进入<strong>结局：庭雪线</strong>，否则进入<strong>结局：归海线</strong>。</p>

<p><strong>本攻略由水竹叶独立整理和编写。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Turn Off μTorrent Ads (or Switch to a Better BitTorrent Client)]]></title>
    <link href="http://jellyflower.github.io/blog/2012/11/10/how-to-turn-off-utorrent-ads-or-switch-to-a-better-bittorrent-client/"/>
    <updated>2012-11-10T16:53:00-05:00</updated>
    <id>http://jellyflower.github.io/blog/2012/11/10/how-to-turn-off-utorrent-ads-or-switch-to-a-better-bittorrent-client</id>
    <content type="html"><![CDATA[<p>The latest release of μTorrent features in-client ads (<a href="http://thenextweb.com/insider/2012/11/09/utorrent-3-22-released-officially-supports-windows-8-and-now-displays-ads-in-client/">here</a>). The once concise and no-nonsense BitTorrent client is now taking a path to bloatware.</p>

<p>To turn off the ads, go to Preferences, and then Advanced, and set the following variables to false:</p>

<ul>
<li>offers.left_rail_offer_enabled</li>
<li>offers.sponsored_torrent_offer_enabled</li>
</ul>


<p>Click OK and restart the program. The ads should be gone now.</p>

<p>I actually switched to another client called <a href="http://www.tixati.com/">Tixati</a>. Currently it works well for me, and it has no nonsense.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Boost C++ Libraries on Windows Using MinGW]]></title>
    <link href="http://jellyflower.github.io/blog/2012/09/01/build-boost-c-plus-plus-libraries-on-windows-using-mingw/"/>
    <updated>2012-09-01T17:36:00-04:00</updated>
    <id>http://jellyflower.github.io/blog/2012/09/01/build-boost-c-plus-plus-libraries-on-windows-using-mingw</id>
    <content type="html"><![CDATA[<p>First, download the source code <a href="http://www.boost.org/users/download/">here</a>. Also download <a href="http://zlib.net/">zlib</a> and <a href="http://www.bzip.org/">bzip2</a>. Extract them to separate directories and open a command prompt in the directory of Boost. Run</p>

<pre><code>bootstrap gcc
b2 -s ZLIB_SOURCE=ZLIB_SOURCE -s BZIP2_SOURCE=BZIP2_SOURCE variant=debug,release link=shared,static threading=single,multi address-model=32,64 toolset=gcc
</code></pre>

<p>That will build all variants. Of course, you can pick and only build what you need.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newer Versions of GCC for Windows: MinGW-w64]]></title>
    <link href="http://jellyflower.github.io/blog/2012/09/01/newer-versions-of-gcc-for-windows-mingw-w64/"/>
    <updated>2012-09-01T16:53:00-04:00</updated>
    <id>http://jellyflower.github.io/blog/2012/09/01/newer-versions-of-gcc-for-windows-mingw-w64</id>
    <content type="html"><![CDATA[<p>I’m very interested in the latest features of C++11 so I want to get the latest version of GCC for Windows. It looks like at the moment the <a href="http://mingw-w64.sourceforge.net/">MinGW-w64</a> project best fits my need. Check the builds <a href="http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/rubenvb/gcc-4.7-release/">here</a> if you target 64-bit Windows and <a href="http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/rubenvb/gcc-4.7-release/">here</a> for 32-bit. Note that there are cross compilers available which can run on Cygwin or Linux.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fraps Video Too Dark? How to: Decode Fraps Video Correctly]]></title>
    <link href="http://jellyflower.github.io/blog/2012/08/02/fraps-video-too-dark-how-to-decode-fraps-video-correctly/"/>
    <updated>2012-08-02T23:59:00-04:00</updated>
    <id>http://jellyflower.github.io/blog/2012/08/02/fraps-video-too-dark-how-to-decode-fraps-video-correctly</id>
    <content type="html"><![CDATA[<p>The video stream in the multimedia file recorded by Fraps is encoded in Fraps’ own codec. The color space of the video stream can be either YV12 or RGB24. There is an option in Fraps which lets you choose which color space to use.</p>

<p>Currently, many decoders fail to handle Fraps videos in the YV12 color space correctly, resulting in decoded pictures that appear very dark.</p>

<p>In either case, the video stream can be decoded correctly using AviSynth. For YV12, use:</p>

<pre><code>FFIndex(INPUT)
AudioDub(FFVideoSource(INPUT), FFAudioSource(INPUT))
ColorYUV(levels="PC-&gt;TV")
ColorMatrix(mode="rec.709-&gt;rec.601", clamp=0)
</code></pre>

<p>For RGB24, use:</p>

<pre><code>FFIndex(INPUT)
AudioDub(FFVideoSource(INPUT), FFAudioSource(INPUT))
</code></pre>

<p>Don’t use the following script:</p>

<pre><code>AviSource(INPUT)
</code></pre>

<p>That uses Fraps’ own decoder, which converts YV12 to RGB24. If you later encode the video to YV12, the whole process, YV12 → RGB24 → YV12, causes quality loss. In the above two scripts, there is no unnecessary color space conversion.</p>

<p>It is said that by using the right parameters, both FFmpeg and x264 can decode the video stream correctly. But I haven’t tried yet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[月海的子守歌的几个版本]]></title>
    <link href="http://jellyflower.github.io/blog/2012/07/22/versions-of-lullaby/"/>
    <updated>2012-07-22T22:56:00-04:00</updated>
    <id>http://jellyflower.github.io/blog/2012/07/22/versions-of-lullaby</id>
    <content type="html"><![CDATA[<h1>日语原版</h1>

<blockquote><p>长弓背负いし 月の精<br/>
梦の中より待ちをりぬ<br/>
今宵やなぐゐ、月夜见囃子<br/>
早く来んかと待ちをりぬ<br/>
眠りたまふ、ぬくと丸みて<br/>
眠りたまふ、母に抱かれて<br/>
真棹掲げし 水の精<br/>
梦の中より待ちをりぬ<br/>
今宵とりふね、うずまき鬼<br/>
早く来んかと待ちをりぬ<br/>
眠りたまふ、ゆるゆる揺られ<br/>
眠りたまふ、海に抱かれて</p></blockquote>

<!--more-->


<h1>汉语</h1>

<blockquote><p>月拥怀中，仙女水鹭。<br/>
梦中徐来，长夜悠悠。<br/>
今宵共君，夜赏囃子。<br/>
盼君速归，长夜悠悠。<br/>
睡意袭我，眼阖梦徭。<br/>
睡意袭我，意归襁褓。<br/>
手扶卓揭，仙女水狃。<br/>
盼君速归，长夜悠悠。<br/>
今宵共君，戏于西楼。<br/>
盼君速归，长夜悠悠。<br/>
睡意袭我，涟漪池留。<br/>
睡意袭我，意归海角。</p></blockquote>

<h1>汉语</h1>

<blockquote><p>清风幻夜曲，残月铭苍息，<br/>
悄随缘心梦，隐约潜雾悲。<br/>
今宵伴君行，妆音盼自取。<br/>
待醒幽夜还，任怨蕴心扉。<br/>
临眠寄梦寻，傍月空悲语。<br/>
临眠寄梦寻，伴母怀梦归。<br/>
轻声唤君语，残梦凝水聚。<br/>
悄随缘心梦，隐约潜雾悲。<br/>
今宵伴君行，还眠声自许。<br/>
待醒幽夜还，任怨蕴心扉。<br/>
临眠寄梦寻，深海悄声忆。<br/>
临眠寄梦寻，幽思怅望归。</p></blockquote>

<h1>汉语</h1>

<blockquote><p>长月杯中扛，明月之妖精。<br/>
梦中徒步来，长夜无可待。<br/>
今宵伴君行，月夜观杂子。<br/>
待君早日还，长夜无可待。<br/>
我欲长睡之，为我合上眼。<br/>
我欲长睡之，母亲怀抱中。<br/>
手将真棹揭，彻水之妖精。<br/>
梦中徒步来，长夜无可待。<br/>
今宵伴君行，子夜戏迷藏。<br/>
待君早日还，长夜无可待。<br/>
我欲长睡之，涟漪轻摇曵。<br/>
我欲长睡之，海之怀抱中。</p></blockquote>

<h1>汉语</h1>

<blockquote><p>黑夜里聆听着歌声我沉沉睡去，<br/>
睡梦里看见你微笑忘记了恐惧。<br/>
歌声里凝望着你，月光照耀着大地；<br/>
微笑里想起过去，轻轻的哭泣。<br/>
快入梦睡去，静静的闭上眼睛；<br/>
快入梦睡去，心跳着你的呼吸。</p>

<p>黑夜里编织着温馨我沉沉睡去，<br/>
睡梦里温暖的怀抱忘记了恐惧。<br/>
温馨里是因为你，海面倒映着繁星；<br/>
怀抱里如此安静，深埋着记忆。<br/>
快入梦睡去，悄悄的贴近你的心；<br/>
快入梦睡去，心即将随你而去。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moon Princess]]></title>
    <link href="http://jellyflower.github.io/blog/2012/04/14/moon-princess/"/>
    <updated>2012-04-14T17:22:00-04:00</updated>
    <id>http://jellyflower.github.io/blog/2012/04/14/moon-princess</id>
    <content type="html"><![CDATA[<p><img src="http://jellyflower.github.io/img/moon-princess.jpg" alt="Moon Princess" /></p>

<p>You shouldn&rsquo;t sell your soul to the devil even if you hated the world.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Official Direct Download Links of Skype]]></title>
    <link href="http://jellyflower.github.io/blog/2012/04/04/official-direct-download-links-of-skype/"/>
    <updated>2012-04-04T22:41:00-04:00</updated>
    <id>http://jellyflower.github.io/blog/2012/04/04/official-direct-download-links-of-skype</id>
    <content type="html"><![CDATA[<p>These are download links of Skype I discovered. They will always be the latest version and multilingual. These are especially useful for Chinese netizens, because the official site will always redirect them to the so-called Chinese official site, where a specially made &ldquo;Chinese Skype&rdquo; will be served, which has long been rumored to eavesdrop its users.</p>

<ul>
<li>Online Windows installer: <a href="http://www.skype.com/go/getskype">http://www.skype.com/go/getskype</a></li>
<li>Offline Windows installer: <a href="http://www.skype.com/go/getskype-full">http://www.skype.com/go/getskype-full</a></li>
<li>MSI: <a href="http://www.skype.com/go/getskype-msi">http://www.skype.com/go/getskype-msi</a></li>
<li>Mac OS X: <a href="http://www.skype.com/go/getskype-macosx.dmg">http://www.skype.com/go/getskype-macosx.dmg</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use MP4Box Without Installing GPAC]]></title>
    <link href="http://jellyflower.github.io/blog/2012/03/31/use-mp4box-without-installing-gpac/"/>
    <updated>2012-03-31T19:42:00-04:00</updated>
    <id>http://jellyflower.github.io/blog/2012/03/31/use-mp4box-without-installing-gpac</id>
    <content type="html"><![CDATA[<p><a href="http://gpac.wp.mines-telecom.fr/mp4box/">MP4Box</a> is an essential tool to manipulate ISO base media file formats, such as MP4, 3GP, etc. Currently it is better than FFmpeg. Later on it is packed in GPAC, a multimedia framework of which the other parts don&rsquo;t appear to be that useful.</p>

<p>To use MP4Box without installing the entire GPAC framework, you can extract relevant files from the installer using a extractor such as 7-Zip:</p>

<ul>
<li>js32.dll</li>
<li>libeay32.dll</li>
<li>libgpac.dll</li>
<li>MP4Box.exe</li>
<li>ssleay32.dll</li>
</ul>


<p>And add the directory to your path. Then you are good to go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Almost Done]]></title>
    <link href="http://jellyflower.github.io/blog/2012/03/17/almost-done/"/>
    <updated>2012-03-17T21:37:00-04:00</updated>
    <id>http://jellyflower.github.io/blog/2012/03/17/almost-done</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve been working on my program which is capable of automatically preparing movies and anime for the new iPad. I tried feeding Madoka&rsquo;s opening to my program and got a somewhat nice result. You can see that my program is able to render subtitles in ASS format using custom fonts, thanks to libass.</p>

<p><img src="http://jellyflower.github.io/img/madoka-render.png" alt="Mahou Shoujo Madoka Magica" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serious X264 Bug: Everything Becomes Purple-ish!]]></title>
    <link href="http://jellyflower.github.io/blog/2012/03/15/serious-x264-bug-everything-becomes-purple-ish/"/>
    <updated>2012-03-15T22:21:00-04:00</updated>
    <id>http://jellyflower.github.io/blog/2012/03/15/serious-x264-bug-everything-becomes-purple-ish</id>
    <content type="html"><![CDATA[<p>Recently a serious x264 bug has been discovered. It makes your video look purple-ish. A comparison <a href="http://tri4.net/subs/notes/44/why-do-you-have-so-many-version-ups">here</a> pretty much proves it.
This bug has been fixed in the latest version. Technically, all encodes encoded by x264 prior to the fix needs to be re-encoded. But I cannot find any information about the exact version number to which the fix has been applied.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hardsubbing ASS Subtitles in AviSynth]]></title>
    <link href="http://jellyflower.github.io/blog/2012/03/11/hardsubbing-ass-subtitles-in-avisynth/"/>
    <updated>2012-03-11T00:27:00-05:00</updated>
    <id>http://jellyflower.github.io/blog/2012/03/11/hardsubbing-ass-subtitles-in-avisynth</id>
    <content type="html"><![CDATA[<p>I find that this job can be nicely done by <a href="http://srsfckn.biz/assrender/">assrender</a>, which is based on libass. It even renders karaoke well. Its usage will be like:</p>

<pre><code>LoadCPlugin("assrender.dll")
assrender("subtitles.ass", hinting=3, fontdir="font")
</code></pre>

<p>The fontdir option is a directory holding fonts used to render the subtitles, which you don&rsquo;t want to install on your system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Frame-accurate Decoding and Frameserving of Video Inside AVI]]></title>
    <link href="http://jellyflower.github.io/blog/2012/03/11/frame-accurate-decoding-and-frameserving-of-video-inside-avi/"/>
    <updated>2012-03-11T00:13:00-05:00</updated>
    <id>http://jellyflower.github.io/blog/2012/03/11/frame-accurate-decoding-and-frameserving-of-video-inside-avi</id>
    <content type="html"><![CDATA[<p>Basically, AVI, MKV, MP4 and FLV are handled very well by <a href="http://code.google.com/p/ffmpegsource/">FFmpegSource2</a>. The script can be something like this:</p>

<pre><code>LoadCPlugin("ffms2.dll")
FFVideoSource("source.mkv")
</code></pre>

<p>Note that I&rsquo;m using the newer C plugin version.</p>

<p>For M2TS and TS, it seems that by far <a href="http://www.videohelp.com/tools/DGAVCDec">DGAVCDec</a> is the best choice. Use DGAVCIndex to index the source and you will get a DGA index file. Then write a script like this:</p>

<pre><code>LoadPlugin("DGAVCDecode.dll")
AVCSource("source.dga")
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Experiment With MP 4.1 and CRF 25]]></title>
    <link href="http://jellyflower.github.io/blog/2012/03/09/experiment-with-mp-4-dot-1-and-crf-25/"/>
    <updated>2012-03-09T00:46:00-05:00</updated>
    <id>http://jellyflower.github.io/blog/2012/03/09/experiment-with-mp-4-dot-1-and-crf-25</id>
    <content type="html"><![CDATA[<p>I accidentally encoded the fifth episode of Gekijouban Kara no Kyoukai using x264. I used the following command:</p>

<pre><code>x264 --profile main --level 4.1 --preset veryslow --tune animation --crf 25 --output output.264 source.avs
</code></pre>

<p>And this is the comparison of Frame 16416 of the video:</p>

<p><img src="http://jellyflower.github.io/img/16416.png" alt="Comparison of Frame 16416" /></p>

<p>Of course the quality is very shitty. The image is fuzzy. The grain is gone. The details cannot be seen clearly. But the bit rate is only 303 kbps for a 720p 8-bit H.264 video stream! That may be useful in preparing video for portable devices. I&rsquo;ll experiment more to get the balance between quality and size.</p>
]]></content>
  </entry>
  
</feed>
